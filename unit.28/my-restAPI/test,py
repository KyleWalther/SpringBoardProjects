from unittest import TestCase

from app import app
from models import db, Todo

# Use test database and don't clutter tests with SQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///desserts_test'
app.config['SQLALCHEMY_ECHO'] = False

# Make Flask errors be real errors, rather than HTML pages with error info
app.config['TESTING'] = True

db.drop_all()
db.create_all()

class TodoTestCase(TestCase):
    def setUp(self):

        Todo.query.delete()
        db.session.commit()

        todo = Todo(title="testTitle", done=True)
        db.session.add(todo)
        db.session.commit()

        self.todo_id = todo.id


    def test_get_single_todo(self):
        with app.test_client() as client:
            resp = client.get(f'/API/todos/{self.todo_id}')
            self.assertEqual(resp.status_code, 200)

            self.assertEqual(
                resp.json,
                {'todo':{
                    'id': self.todo_id,
                    'title': 'testTitle',
                    'done': True
                }
                }
            )


    def test_create_todo(self):
        with app.test_client() as client:
            resp = client.post(
                "/todos", json={
                    "name": "TestCake2",
                    "calories": 20,
                })
            self.assertEqual(resp.status_code, 201)

            # don't know what ID it will be, so test then remove
            self.assertIsInstance(resp.json['dessert']['id'], int)
            del resp.json['dessert']['id']

            self.assertEqual(
                resp.json,
                {"dessert": {'name': 'TestCake2', 'calories': 20}})

            self.assertEqual(Todo.query.count(), 2)








